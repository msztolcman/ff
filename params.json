{"name":"ff","tagline":"Easily search and process files.","body":"ff\r\n==\r\n\r\nEasily search and process files.\r\n\r\nIf you need to search files by their contents, *or* search for their contents, please look at [ack](https://github.com/petdance/ack2) or [pss](https://github.com/eliben/pss). These are better suited for this kind of task.\r\n\r\nCurrent stable version\r\n----------------------\r\n\r\n1.0.5\r\n\r\nWhy `ff` and not `find`?\r\n------------------------\r\n\r\nJust because I find that most of my searches was:\r\n\r\n    find . -iname '*name*'\r\n\r\nAnd it's easier to me to enter:\r\n\r\n    ff name\r\n\r\nAlso, my `find` have sometimes problems with non ascii names:\r\n\r\n    % find /tmp -name '*GÖS*'\r\n    % \r\n\r\nAnd with `ff`:\r\n\r\n    % ff '*GÖS*' /tmp\r\n    /tmp/eee_GÖS_från_förstår_pas\r\n    /tmp/eee_GÖS_från_pas_förstår_qq\r\n    /tmp/pas_GÖS_från_förstår\r\n    %\r\n\r\nit just works! :)\r\n\r\nAdditionally, `ff` should work on any platform where [Python](http://python.org) is available, it means Linux, MacOS X, Windows (not tested here) etc.\r\n\r\nBasic usage\r\n-----------\r\n\r\n    ff passwd\r\n\r\nSearch for all files and directories in current directory and below, which is match to pattern: `*passwd*`.\r\n\r\n    ff -B passwd\r\n\r\nSearch for all files and directories in current directory and below, which is match to pattern: `*passwd`.\r\n\r\n    ff -E passwd\r\n\r\nSearch for all files and directories in current directory and below, which is match to pattern: `passwd*`.\r\n\r\n    ff -EB passwd\r\n\r\nAdvanced usage\r\n--------------\r\n\r\n    ff -p pa -s /tmp --shell-exec -x '[ -f \"{path}\" ] && mkdir -p /tmp{dirname}; cp -r \"{path}\" \"/tmp{path}\"'\r\n\r\nFind all files and directories in /tmp that match expression: `*pa*`, and copy them (with original directories hierarchy!) to /tmp.\r\n\r\nSo powerful!\r\n\r\nMagic pattern\r\n-------------\r\n\r\nIt's form of pattern known good for Perl or AWK lovers :)\r\n\r\nIf patterns is in general form:\r\n\r\n    mode/pattern/modifier\r\n\r\n(decribed more in full usage below), then it is parsed and used in a little other manner.\r\n\r\nInstead of arguments `--regexp` or `--fuzzy`, you can pass it in `mode` part of pattern.\r\nNext there is delimiter, which usually is `/` (backslash), but there can be more characters,\r\ndescribed in Usage section.\r\n\r\nAfter that is a pattern, next delimiter again, and then modifiers (again, modifiers are described in Usage section).\r\n\r\nSome examples:\r\n\r\nSearch for all files and directories in current directory and below, which is match to pattern: `passwd`.\r\n\r\n    ff f/pwd/\r\n\r\nSearch for all files and directories in current directory and below, which name contains letters 'p', 'w', 'd', with any other characters between them.\r\n\r\n    ff g/^(chk)?passwd/\r\n\r\nSearch for all files and directories in current directory and below, which name starts from 'chkpasswd' or 'passwd'.\r\n\r\nConfiguration file\r\n------------------\r\n\r\n`ff` recognizes 2 configuration files: user-wide and project-wide. Both can specify the same things and have identical syntax (ini files). User-wide one is located in `$HOME/.ff.rc`, and project-wide is located in current directory (ie. projects root).\r\nExample file is located at [github](https://github.com/msztolcman/ff/blob/master/ff.rc).\r\n\r\nPlugins\r\n-------\r\n\r\nPlugins are the way to easily extend capabilities of `ff`. Currently there is only support for plugins allowing to extend tests made on files list. In future, there is plan to add support for plugins allowing to make some actions on found files (currently is _built-in plugin_: `--shell`), for example modifying, copying or anything else).\r\n\r\n`ff` search for plugins in user's home directory, but there is posibility to tell him about the other..\r\nBy default, `ff` search for plugins in:\r\n\r\n* `~/.ff/plugins`\r\n\r\nAnd using switch `--plugins-path` you can tell `ff` about other plugins location.\r\n\r\nYou can also pass argument to plugins. For example, in `size` plugin (bundled with `ff`), You must to tell the plugin what size of file You expect:\r\n\r\n    `ff pas --test size:=5k`\r\n\r\nAbove example will find every file with _pas_ part in its name, and its size is *exactly* 5 [kibibytes](http://en.wikipedia.org/wiki/Binary_prefix#IEC_standard_prefixes). More about `size` plugin in [projects wiki](https://github.com/msztolcman/ff/wiki/).\r\n\r\nWriting plugins\r\n---------------\r\n\r\nPlugins are written in [Python](http://python.org), and are simple Python modules with at least `plugin_action` callable specified. Plugins are imported, and `plugin_action` must return `True` or `False` to tell `ff` that given found object meets expectations, and should be returned.\r\n\r\n`ff` recognize and use only 3 objects in plugin:\r\n\r\n* `plugin_action` - (REQUIRED) [callable] must return `True` od `False`. Must recognize 3 arguments:\r\n    * `name` - name of plugin\r\n    * `argument` - argument passed by user\r\n    * `path` - absolute path to tested object\r\n* `PLUGIN_DESCR` - (OPTIONAL) [string or callable] short descr of plugin, printed when `ff` is called with switch `--help-test-plugins`\r\n* `PLUGIN_HELP` - (OPTIONAL) [string or callable] full help for plugin, printed when `ff` is called with switch `--help-test-plugins TEST_NAME`\r\n\r\nPlugin file also must have special name, and be placed in directory recognized by `ff` (see: [plugins][plugins]).\r\nName of file is built with three parts, connected with underscore:\r\n* `ffplugin` - fixed prefix\r\n* `test` - type of plugin (currently only `test` plugins are recognized)\r\n* `NAME` - name of plugin\r\n\r\nAnd as Python module, must and with `.py` extension :)\r\n\r\nPlugin must validate input data (`argument`), and raise `FFPluginError` exception with approbiate message on any error. Plugin shouldn't raise any other exceptions.\r\nThere is one caveat with this: `FFPluginError` exception is declared *inside* `ff`! When given plugin is imported, it is _monkeypatched_ and `FFPluginError` exception is injected into it.\r\n\r\nThere is an example plugin, which allow us to search for files in specified size. Is in [project repository](https://github.com/msztolcman/ff/tree/master/ff_plugins) in directory plugins. You can use it as a base for your own plugins :)\r\n\r\nInstallation\r\n------------\r\n\r\n1. Using PIP\r\n\r\n`ff` should work on any platform where [Python](http://python.org)\r\nis available, it means Linux, Windows, MacOS X etc. \r\n\r\nSimplest way is to use Python's built-in package system:\r\n\r\n    pip install ff-find\r\n\r\n2. Using sources\r\n\r\nDownload sources from [Github](https://github.com/msztolcman/ff/archive/1.0.5.zip):\r\n\r\n    wget -O 1.0.5.zip https://github.com/msztolcman/ff/archive/1.0.5.zip\r\n    \r\nor\r\n\r\n    curl -o 1.0.5.zip https://github.com/msztolcman/ff/archive/1.0.5.zip\r\n\r\nUnpack:\r\n\r\n    unzip 1.0.5.zip\r\n\r\nAnd install\r\n\r\n    cd ff-1.0.5\r\n    python setup.py install\r\n\r\nVoila!\r\n\r\nUsage\r\n-----\r\n\r\n    usage: ff [-h] [--print0] [--ignorecase] [--source source] [--pattern PATTERN]\r\n              [--regexp] [--fuzzy] [--depth DEPTH] [--path-search]\r\n              [--regex-multiline] [--regex-dotall] [--begin] [--end]\r\n              [--invert-match] [--mode MODE] [--exec COMMAND] [--prefix]\r\n              [--prefix-dirs PREFIX_DIRS] [--prefix-files PREFIX_FILES]\r\n              [--no-display] [--no-colorize] [--verbose-exec] [--interactive-exec]\r\n              [--shell-exec] [--vcs] [--exclude-path EXCLUDED_PATH] [--test TESTS]\r\n              [--plugins-path PLUGINS_PATH] [--version]\r\n              [--help-test-plugins [TEST_NAME[,TEST2_NAME]]]\r\n              [--show-plugins-paths]\r\n              [pattern] [source [source ...]]\r\n    \r\n    Easily search and process files.\r\n    \r\n    positional arguments:\r\n      pattern               pattern to search\r\n      source                optional source (if missing, use current directory)\r\n    \r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      --print0, -0          split results by binary zero instead of new line\r\n                            (useful to work with xargs)\r\n      --ignorecase, -i, --ignore-case\r\n                            ignore case when match pattern to paths\r\n      --source source, -s source\r\n                            optional, see: source above\r\n      --pattern PATTERN, -p PATTERN\r\n                            optional, see: pattern above\r\n      --regexp, -g          treat pattern as regular expression (uses Python\r\n                            regexp engine)\r\n      --fuzzy, -f           pattern defines only set and order of characters used\r\n                            in filename\r\n      --depth DEPTH, -D DEPTH\r\n                            how deep we should search (default: -1, means\r\n                            infinite)\r\n      --path-search, -q     search in full path, instead of bare name of item\r\n      --regex-multiline, -l\r\n                            modify meta characters: \"^\" and \"$\" behaviour when\r\n                            pattern is regular expression. See:\r\n                            http://docs.python.org/2/library/re.html#re.MULTILINE\r\n      --regex-dotall, -d    modify meta character: \".\" behaviour when pattern is\r\n                            regular expression. See:\r\n                            http://docs.python.org/2/library/re.html#re.DOTALL\r\n      --begin, -B           match pattern to begin of item name (ignored in regexp\r\n                            mode)\r\n      --end, -E             match pattern to end of item name (ignored in regexp\r\n                            mode)\r\n      --invert-match, -v, -r\r\n                            find objects that do *not* match pattern\r\n      --mode MODE, -m MODE  allow to choose to search for \"files\" only, \"dirs\", or\r\n                            \"all\"\r\n      --exec COMMAND, -x COMMAND\r\n                            execute some command on every found item. In command,\r\n                            placeholders: {path}, {dirname}, {basename} are\r\n                            replaced with correct value\r\n      --prefix              add prefix \"dr: \" (directory) or \"fl: \" (file) to\r\n                            every found item\r\n      --prefix-dirs PREFIX_DIRS\r\n                            prefix for matched directories\r\n      --prefix-files PREFIX_FILES\r\n                            prefix for matched files\r\n      --no-display          don't display element (useful with --exec argument)\r\n      --no-colorize         Colorize output\r\n      --verbose-exec        show command before execute it\r\n      --interactive-exec    ask before execute command on every item\r\n      --shell-exec          execute command from --exec argument in shell (with\r\n                            shell expansion etc)\r\n      --vcs                 do not skip VCS directories (.git, .svn etc)\r\n      --exclude-path EXCLUDED_PATH, -c EXCLUDED_PATH\r\n                            skip given paths from scanning\r\n      --test TESTS, -t TESTS\r\n                            additional tests, available by plugins (see\r\n                            annotations below or --help-test-plugins)\r\n      --plugins-path PLUGINS_PATH\r\n                            additional path where to search plugins (see\r\n                            annotations below)\r\n      --version             show program's version number and exit\r\n      --help-test-plugins [TEST_NAME[,TEST2_NAME]]\r\n                            display help for installed test plugins\r\n      --show-plugins-paths  Show recognized plugins paths and exit\r\n    \r\n    Pattern, provided as positional argument (not with --pattern) can be provided\r\n    in special form (called: magic pattern). It allows to more \"nerdish\"\r\n    (or \"perlish\" :) ) way to control `ff` behavior.\r\n    \r\n    The general pattern for magic pattern is:\r\n    \r\n        mode/pattern/modifier\r\n    \r\n    where:\r\n        mode - is one of 'p' (--pattern), 'g' - (--regexp) or 'f' (--fuzzy)\r\n        / - is delimiter:\r\n            * one of: '/', '!', '@', '#', '%', '|', and then start and end\r\n                delimiter must be the same\r\n            * one of: '{', '[', '(', '<', and the end delimiter must be the\r\n                closing one (ex. '}' if start is '{')\r\n        pattern - any pattern, processed in a way specified with 'mode'\r\n        modifier - one of: 'i' (--ignore-case), 'm' (--regex-multiline),\r\n            's' (--regex-dotall), 'v' (not used currently), 'r' (--invert-match)\r\n    \r\n    There is also ability to extend capabilities of `ff` by plugins. Plugins are\r\n    run with switch --test and then plugin name with optional plugin argument:\r\n    \r\n        --test plugin_name:plugin_arg\r\n    \r\n    There can be used more then one plugin at once.\r\n    \r\n    Authors:\r\n        Marcin Sztolcman <marcin@urzenia.net> // http://urzenia.net\r\n    \r\n    HomePage:\r\n        http://msztolcman.github.io/ff/\r\n\r\nAuthors\r\n-------\r\n\r\nMarcin Sztolcman <marcin@urzenia.net>\r\n\r\nContact\r\n-------\r\n\r\nIf you like or dislike this software, please do not hesitate to tell me about this me via email (marcin@urzenia.net).\r\n\r\nIf you find bug or have an idea to enhance this tool, please use GitHub's [issues](https://github.com/msztolcman/ff/issues).\r\n\r\nLicense\r\n-------\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 Marcin Sztolcman\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nChangeLog\r\n---------\r\n\r\n### v1.0.5\r\n\r\n* use README.rst for Pypi\r\n\r\n### v1.0.4\r\n\r\n* fixes for Pypi\r\n\r\n### v1.0.3\r\n\r\n* fixes for Pypi\r\n\r\n### v1.0.2\r\n\r\n* fixes for Pypi\r\n\r\n### v1.0.1\r\n\r\n* fixes for Pypi\r\n\r\n### v1.0.0\r\n\r\n* backward incompatible: magic pattern doesn't recognize 'q' flag for 'path-search' mode, flag --path-search must be passed explicitly\r\n* new option: --depth - limit searching to this depth\r\n* new option: --colorize\r\n* new: parse and recognize configuration files\r\n* new: added ability to install via pip\r\n* changed versioning format: use [SemVer](http://semver.org/)\r\n* code cleanups and many refactorizations/rewrites\r\n* paths are now normalized before comparisons of excluded paths\r\n* parse regexps with UNICODE flag\r\n* '?' and '+' are now valid delimiters in magic pattern\r\n* ignore case of --mode option\r\n* documentation improvements\r\n* more tests\r\n* improved fuzzy search\r\n* better validation of arguments\r\n* improved error messages\r\n* improved help\r\n* better interoperability: do not hardcode new line characters or path delimiters\r\n* do not allow for duplicating modifiers\r\n* FIX: do not crash on unknown characters, just replace them\r\n* FIX: do not crash on printing unknown characters\r\n* added simple Makefile\r\n* improved config for pylint\r\n* added config for [versionner](http://msztolcman.github.io/versionner)\r\n\r\n### v0.5\r\n\r\n* ability to run plugins for tests (with first plugin: size)\r\n* many improvements to proper handling UTF-8\r\n* many improvements for work in Python3\r\n* improved PEP8 compatibility\r\n* refactored code\r\n* added --version switch\r\n* removed expanding shell variables when execute external command if no --shell-exec is given\r\n\r\n### v.0.4\r\n\r\n* added changelog\r\n* added fuzzy-search mode\r\n* added 'magic pattern' mode\r\n* -r argument is now an alias to -v\r\n* better handling unicode characters in paths\r\n* handling CTRL-C\r\n* added modifier: --path-search\r\n\r\n### v0.3\r\n\r\n* use argparse instead of getopt to parse options\r\n* allow to exclude path from search\r\n* improved help and documentation\r\n\r\n### v0.2\r\n\r\n* added option 'shell-exec' - allow to exec programs with shell expansion\r\n* exec: add shell variables expansion\r\n* by default, skip VCS directories\r\n* added option 'print0' - delimit entries with binary 0, as for xargs\r\n* added options 'interactive-exec' - ask before every exec\r\n* much more powerfull exec engine\r\n* added option 'no-display' - do not display results (useful with --exec)\r\n* added option 'verbose-exec' - show executed command\r\n* added option 'invert-match' - like in grep\r\n* improved help and documentation\r\n* cleanups in code\r\n\r\n### v0.1\r\n\r\n* initial version\r\n","google":"UA-207617-22","note":"Don't delete this file! It's used internally to help with page regeneration."}